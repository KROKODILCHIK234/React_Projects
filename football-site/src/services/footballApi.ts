// üöÄ API —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
// –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞

// üìù –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (—Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö) - —ç—Ç–æ –∫–∞–∫ "—á–µ—Ä—Ç–µ–∂–∏" –¥–ª—è –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
export interface Team {
  id: string;
  name: string;
  logo: string;
  league: string;
  country: string;
  stadium: string;
  coach: string;
  playersCount: number;
  titles: number;
  description: string;
  founded: number;
  position: number;
  played?: number;
  won?: number;
  drawn?: number;
  lost?: number;
  goalsFor?: number;
  goalsAgainst?: number;
  goalDifference?: number;
  points?: number;
  form?: string[];
}

export interface Player {
  id: string;
  name: string;
  photo: string;
  team: string;
  teamLogo: string;
  league: string;
  nationality: string;
  nationalityFlag: string;
  position: string;
  overall: number;
  rating: number;
  goals: number;
  assists: number;
  matches: number;
  description: string;
  age?: number;
  height?: string;
  weight?: string;
}

export interface League {
  id: string;
  name: string;
  country: string;
  logo: string;
  founded?: number;
  teamsCount?: number;
  playersCount?: number;
  description?: string;
  season?: string;
  teams?: Team[];
  matches?: any[];
}

export interface Match {
  id: string;
  homeTeam: string;
  awayTeam: string;
  homeLogo: string;
  awayLogo: string;
  date: string;
  time: string;
  venue: string;
  status: string;
  league?: string;
  homeScore?: number;
  awayScore?: number;
}

// üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const handleApiError = (error: any) => {
  console.error('‚ùå API Error:', error);
};

// üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Python API
const loadPythonData = async () => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å backend API
    const response = await fetch('http://localhost:8000/standings');
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data = await response.json();
    console.log('üîç Backend data:', data);
    console.log('üîç First team data:', data.table?.[0]);
    console.log('üîç First team keys:', data.table?.[0] ? Object.keys(data.table[0]) : 'No data');
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
    return {
      leagues: [{
        id: 'premier-league',
        name: data.competition,
        country: '–ê–Ω–≥–ª–∏—è',
        logo: 'https://upload.wikimedia.org/wikipedia/en/f/f2/Premier_League_Logo.svg',
        season: data.season,
        teamsCount: data.table.length,
        playersCount: 0
      }],
      teams: data.table.map((team: any, index: number) => ({
        id: team.name.toLowerCase().replace(/\s+/g, '-'),
        name: team.name,
        logo: team.crest,
        league: 'Premier League',
        country: '–ê–Ω–≥–ª–∏—è',
        stadium: 'Unknown',
        coach: 'Unknown',
        playersCount: 25,
        titles: 0,
        description: `${team.name} - –∫–æ–º–∞–Ω–¥–∞ –∏–∑ Premier League`,
        founded: 1900,
        position: team.position,
        played: team.played,
        won: team.won,
        drawn: team.drawn,
        lost: team.lost,
        goalsFor: team.goalsFor,
        goalsAgainst: team.goalsAgainst,
        goalDifference: team.goalDifference,
        points: team.points,
        form: ['W', 'W', 'D', 'W', 'W'] // –ó–∞–≥–ª—É—à–∫–∞
      })),
      players: [],
      matches: []
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Python API:', error);
    return null;
  }
};

// ‚öΩ –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–≥
export const getLeagues = async (): Promise<League[]> => {
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–≥...');
    const pythonData = await loadPythonData();
    
    if (pythonData && pythonData.leagues && pythonData.leagues.length > 0) {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ª–∏–≥ –∏–∑ API –ø–∞—Ä—Å–µ—Ä–∞:', pythonData.leagues.length);
      return pythonData.leagues;
    }
    
    console.log('‚ö†Ô∏è API –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
    return [];
  } catch (error) {
    handleApiError(error);
    return [];
  }
};

// ‚öΩ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –ª–∏–≥–∏
export const getTeamsByLeague = async (leagueId: string): Promise<Team[]> => {
  try {
    console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ª–∏–≥–∏: ${leagueId}`);
    
    const pythonData = await loadPythonData();
    if (pythonData && pythonData.teams) {
      // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –ª–∏–≥
      const leagueMapping: { [key: string]: string } = {
        'premier-league': 'Premier League',
        'la-liga': 'La Liga',
        'bundesliga': 'Bundesliga',
        'serie-a': 'Serie A',
        'ligue-1': 'Ligue 1'
      };
      
      const leagueName = leagueMapping[leagueId] || leagueId;
      const leagueTeams = pythonData.teams.filter((team: Team) => team.league === leagueName);
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ª–∏–≥–∏ ${leagueName}: ${leagueTeams.length}`);
      return leagueTeams;
    }
    
    return [];
  } catch (error) {
    handleApiError(error);
    return [];
  }
};

// ‚öΩ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
export const getPlayersByTeam = async (teamId: string): Promise<Player[]> => {
  try {
    console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã: ${teamId}`);
    
    const pythonData = await loadPythonData();
    if (pythonData && pythonData.players) {
      const teamPlayers = pythonData.players.filter((player: Player) => player.team === teamId);
      return teamPlayers;
    }
    
    return [];
  } catch (error) {
    handleApiError(error);
    return [];
  }
};

// ‚öΩ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
export const getAllTeams = async (): Promise<Team[]> => {
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã...');
    
    const pythonData = await loadPythonData();
    if (pythonData && pythonData.teams && pythonData.teams.length > 0) {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–∞–Ω–¥ –∏–∑ API:', pythonData.teams.length);
      return pythonData.teams;
    }
    
    console.log('‚ö†Ô∏è API –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
    return [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getAllTeams:', error);
    handleApiError(error);
    return [];
  }
};

// ‚öΩ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
export const getAllPlayers = async (): Promise<Player[]> => {
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤...');
    
    const pythonData = await loadPythonData();
    if (pythonData && pythonData.players && pythonData.players.length > 0) {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ API:', pythonData.players.length);
      return pythonData.players;
    }
    
    console.log('‚ö†Ô∏è API –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
    return [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getAllPlayers:', error);
    handleApiError(error);
    return [];
  }
};

// ‚öΩ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –ª–∏–≥–∏
export const getMatchesByLeague = async (leagueId: string): Promise<Match[]> => {
  try {
    console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç—á–∏ –ª–∏–≥–∏: ${leagueId}`);
    
    const pythonData = await loadPythonData();
    if (pythonData && pythonData.matches) {
      const leagueMatches = pythonData.matches.filter((match: Match) => match.league === leagueId);
      return leagueMatches;
    }
    
    return [];
  } catch (error) {
    handleApiError(error);
    return [];
  }
};

// üîç –ü–æ–∏—Å–∫
export const search = async (term: string) => {
  try {
    console.log(`üîç –ü–æ–∏—Å–∫: ${term}`);
    
    const pythonData = await loadPythonData();
    if (pythonData) {
      const results = {
        teams: pythonData.teams?.filter((team: Team) => 
          team.name.toLowerCase().includes(term.toLowerCase()) ||
          team.country.toLowerCase().includes(term.toLowerCase())
        ) || [],
        players: pythonData.players?.filter((player: Player) => 
          player.name.toLowerCase().includes(term.toLowerCase()) ||
          player.team.toLowerCase().includes(term.toLowerCase()) ||
          player.nationality.toLowerCase().includes(term.toLowerCase())
        ) || [],
        leagues: pythonData.leagues?.filter((league: League) => 
          league.name.toLowerCase().includes(term.toLowerCase()) ||
          league.country.toLowerCase().includes(term.toLowerCase())
        ) || []
      };
      
      return results;
    }
    
    return { teams: [], players: [], leagues: [] };
  } catch (error) {
    handleApiError(error);
    return { teams: [], players: [], leagues: [] };
  }
};