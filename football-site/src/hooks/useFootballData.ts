// üé£ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—É—Ç–±–æ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
// –•—É–∫–∏ - —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "use" –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥—Ä—É–≥–∏–µ —Ö—É–∫–∏

import { useState, useEffect } from 'react';
import { 
  getLeagues, 
  getTeamsByLeague, 
  getPlayersByTeam, 
  getAllTeams, 
  getAllPlayers,
  getMatches,
  League,
  Team,
  Player
} from '../services/footballApi';

// üéØ –•—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–≥
export const useLeagues = () => {
  // üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
  const [leagues, setLeagues] = useState<League[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const fetchLeagues = async () => {
      try {
        setLoading(true);
        setError(null);
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–≥–∏...');
        
        const data = await getLeagues();
        setLeagues(data);
        
        console.log('‚úÖ –õ–∏–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data.length);
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–≥:', err);
        setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      } finally {
        setLoading(false);
      }
    };

    fetchLeagues();
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ = –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

  return { leagues, loading, error };
};

// ‚öΩ –•—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥
export const useTeams = (leagueId?: string) => {
  const [teams, setTeams] = useState<Team[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchTeams = async () => {
      try {
        setLoading(true);
        setError(null);
        console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã${leagueId ? ` –¥–ª—è –ª–∏–≥–∏ ${leagueId}` : ''}...`);
        
        const data = leagueId 
          ? await getTeamsByLeague(leagueId)
          : await getAllTeams();
        
        setTeams(data);
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data.length);
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥:', err);
        setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      } finally {
        setLoading(false);
      }
    };

    fetchTeams();
  }, [leagueId]); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ leagueId

  return { teams, loading, error };
};

// üë§ –•—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
export const usePlayers = (teamId?: string) => {
  const [players, setPlayers] = useState<Player[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchPlayers = async () => {
      try {
        setLoading(true);
        setError(null);
        console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤${teamId ? ` –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ${teamId}` : ''}...`);
        
        const data = teamId 
          ? await getPlayersByTeam(teamId)
          : await getAllPlayers();
        
        setPlayers(data);
        console.log('‚úÖ –ò–≥—Ä–æ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data.length);
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:', err);
        setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      } finally {
        setLoading(false);
      }
    };

    fetchPlayers();
  }, [teamId]);

  return { players, loading, error };
};

// üìÖ –•—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—á–µ–π
export const useMatches = (leagueId?: string) => {
  const [matches, setMatches] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchMatches = async () => {
      try {
        setLoading(true);
        setError(null);
        console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç—á–∏${leagueId ? ` –¥–ª—è –ª–∏–≥–∏ ${leagueId}` : ''}...`);
        
        const data = await getMatches(leagueId);
        setMatches(data);
        console.log('‚úÖ –ú–∞—Ç—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data.length);
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—á–µ–π:', err);
        setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      } finally {
        setLoading(false);
      }
    };

    fetchMatches();
  }, [leagueId]);

  return { matches, loading, error };
};

// üîç –•—É–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
export const useSearch = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [teams, setTeams] = useState<Team[]>([]);
  const [players, setPlayers] = useState<Player[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // üîç –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
  const search = async (term: string) => {
    if (!term.trim()) {
      setTeams([]);
      setPlayers([]);
      return;
    }

    try {
      setLoading(true);
      setError(null);
      console.log(`üîç –ò—â–µ–º: "${term}"`);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      const [teamsData, playersData] = await Promise.all([
        getAllTeams(),
        getAllPlayers()
      ]);

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
      const filteredTeams = teamsData.filter(team =>
        team.name.toLowerCase().includes(term.toLowerCase()) ||
        team.league.toLowerCase().includes(term.toLowerCase()) ||
        team.country.toLowerCase().includes(term.toLowerCase())
      );

      const filteredPlayers = playersData.filter(player =>
        player.name.toLowerCase().includes(term.toLowerCase()) ||
        player.team.toLowerCase().includes(term.toLowerCase()) ||
        player.position.toLowerCase().includes(term.toLowerCase())
      );

      setTeams(filteredTeams);
      setPlayers(filteredPlayers);
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${filteredTeams.length} –∫–æ–º–∞–Ω–¥, ${filteredPlayers.length} –∏–≥—Ä–æ–∫–æ–≤`);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      search(searchTerm);
    }, 300); // –ó–∞–¥–µ—Ä–∂–∫–∞ 300–º—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

    return () => clearTimeout(timeoutId);
  }, [searchTerm]);

  return {
    searchTerm,
    setSearchTerm,
    teams,
    players,
    loading,
    error,
    search
  };
};




