import React, { useState, useEffect } from 'react';
import { Search, User, Shirt, Flag, Goal, Zap, Star, AlertCircle, Eye, Filter } from 'lucide-react';
import ScrollAnimation from './ScrollAnimation';
import { usePlayers, useLeagues } from '../hooks/useFootballData';
import { Player } from '../types/Player';

const PlayersPage: React.FC = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedLeague, setSelectedLeague] = useState('all');
  const [selectedPosition, setSelectedPosition] = useState('all');
  const [selectedPlayer, setSelectedPlayer] = useState<any>(null);

  // üîß –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã API –≤–º–µ—Å—Ç–æ —Ö—É–∫–æ–≤
  const [allPlayers, setAllPlayers] = useState<any[]>([]);
  const [leaguesData, setLeaguesData] = useState<any[]>([]);
  const [playersLoading, setPlayersLoading] = useState(true);
  const [leaguesLoading, setLeaguesLoading] = useState(true);
  const [playersError, setPlayersError] = useState<string | null>(null);
  const [leaguesError, setLeaguesError] = useState<string | null>(null);
  const [dataLoaded, setDataLoaded] = useState(false);

  // üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
  useEffect(() => {
    if (dataLoaded) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
    
    const loadData = async () => {
      try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é...');
        
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API —Ñ—É–Ω–∫—Ü–∏–∏
        const { getAllPlayers, getLeagues } = await import('../services/footballApi');
        
        console.log('üìä –í—ã–∑—ã–≤–∞–µ–º getAllPlayers...');
        const players = await getAllPlayers();
        console.log('‚úÖ –ü–æ–ª—É—á–∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤:', players.length);
        setAllPlayers(players);
        setPlayersLoading(false);
        
        console.log('üìä –í—ã–∑—ã–≤–∞–µ–º getLeagues...');
        const leagues = await getLeagues();
        console.log('‚úÖ –ü–æ–ª—É—á–∏–ª–∏ –ª–∏–≥–∏:', leagues.length);
        console.log('‚úÖ –ù–∞–∑–≤–∞–Ω–∏—è –ª–∏–≥:', leagues.map(l => l.name));
        setLeaguesData(leagues);
        setLeaguesLoading(false);
        
        setDataLoaded(true);
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        setPlayersError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        setLeaguesError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        setPlayersLoading(false);
        setLeaguesLoading(false);
        setDataLoaded(true);
      }
    };

    loadData();
  }, [dataLoaded]);

  // üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('üîç PlayersPage - allPlayers:', allPlayers.length);
  console.log('üîç PlayersPage - leaguesData:', leaguesData.length);
  console.log('üîç PlayersPage - leaguesData names:', leaguesData.map(l => l.name));
  console.log('üîç PlayersPage - loading:', playersLoading);
  console.log('üîç PlayersPage - error:', playersError);

  // –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
  const basicPositions = ['GK', 'CB', 'RB', 'LB', 'CM', 'CAM', 'LW', 'ST', 'RW'];
  
  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5 –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö –ª–∏–≥
  const availableLeagues = ['all', 'Premier League', 'La Liga', 'Bundesliga', 'Serie A', 'Ligue 1'];
  const availablePositions = ['all', ...basicPositions];

  const filteredPlayers = allPlayers.filter(player => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–≥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    const leagueMatch = selectedLeague === 'all' || 
      player.league === selectedLeague || 
      (leaguesData.find(league => league.id === player.league)?.name === selectedLeague);
    
    return leagueMatch &&
      (selectedPosition === 'all' || player.position === selectedPosition) &&
      (player.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
       player.team.toLowerCase().includes(searchTerm.toLowerCase()) ||
       player.nationality.toLowerCase().includes(searchTerm.toLowerCase())) &&
      (selectedPosition === 'all' || basicPositions.includes(player.position));
  });

  const getPositionColor = (position: string) => {
    switch (position) {
      case 'GK': return '#3b82f6'; // Blue - –í—Ä–∞—Ç–∞—Ä—å
      case 'CB': return '#10b981'; // Green - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫
      case 'RB': return '#6366f1'; // Indigo - –ü—Ä–∞–≤—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫
      case 'LB': return '#6366f1'; // Indigo - –õ–µ–≤—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫
      case 'CM': return '#06b6d4'; // Cyan - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫
      case 'CAM': return '#8b5cf6'; // Purple - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞—Ç–∞–∫—É—é—â–∏–π –ø–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫
      case 'LW': return '#f59e0b'; // Orange - –õ–µ–≤—ã–π –≤–∏–Ω–≥–µ—Ä
      case 'ST': return '#ef4444'; // Red - –ù–∞–ø–∞–¥–∞—é—â–∏–π
      case 'RW': return '#f59e0b'; // Orange - –ü—Ä–∞–≤—ã–π –≤–∏–Ω–≥–µ—Ä
      default: return '#64748b'; // Gray
    }
  };

  const getPositionName = (position: string) => {
    const positions: { [key: string]: string } = {
      'GK': '–í—Ä–∞—Ç–∞—Ä—å',
      'CB': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫',
      'RB': '–ü—Ä–∞–≤—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫',
      'LB': '–õ–µ–≤—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫',
      'CM': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫',
      'CAM': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞—Ç–∞–∫—É—é—â–∏–π –ø–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫',
      'LW': '–õ–µ–≤—ã–π –≤–∏–Ω–≥–µ—Ä',
      'ST': '–ù–∞–ø–∞–¥–∞—é—â–∏–π',
      'RW': '–ü—Ä–∞–≤—ã–π –≤–∏–Ω–≥–µ—Ä'
    };
    return positions[position] || position;
  };

  if (playersLoading || leaguesLoading) {
    return (
      <div className="players-page">
        <div className="container">
          <div className="loading-container">
            <Star size={48} className="loading-spinner" />
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤...</p>
          </div>
        </div>
      </div>
    );
  }

  if (playersError || leaguesError) {
    return (
      <div className="players-page">
        <div className="container">
          <div className="error-message">
            <AlertCircle size={24} />
            <p>{playersError || leaguesError}</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="players-page">
      <div className="container">
        <ScrollAnimation animation="fadeInUp">
          <div className="page-header">
            <h1>
              <span className="gradient-text">–ò–≥—Ä–æ–∫–∏</span>
            </h1>
            <p>–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –ª—É—á—à–∏—Ö —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–æ–≤ –º–∏—Ä–∞ —Å –≤—ã–¥–∞—é—â–∏–º–∏—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∏ –Ω–∞–≤—ã–∫–∞–º–∏</p>
          </div>
        </ScrollAnimation>

        <ScrollAnimation animation="fadeInUp" delay={200}>
          <div className="stats-row">
            <div className="stat-item">
              <User size={32} />
              <div>
                <span className="stat-number">{allPlayers.length}+</span>
                <span className="stat-label">–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤</span>
              </div>
            </div>
            <div className="stat-item">
              <Shirt size={32} />
              <div>
                <span className="stat-number">{leaguesData.length}</span>
                <span className="stat-label">–õ–∏–≥</span>
              </div>
            </div>
            <div className="stat-item">
              <Star size={32} />
              <div>
                <span className="stat-number">{filteredPlayers.length}</span>
                <span className="stat-label">–ù–∞–π–¥–µ–Ω–æ</span>
              </div>
            </div>
          </div>
        </ScrollAnimation>

        <div className="search-filters">
          <div className="search-container">
            <Search size={20} className="search-icon" />
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–º–µ–Ω–∏, –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏..."
              className="search-input"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>

          <div className="filter-group">
            <label>–õ–∏–≥–∞:</label>
            <div className="filter-buttons">
              {availableLeagues.map(league => (
                <button
                  key={league}
                  onClick={() => setSelectedLeague(league)}
                  className={`filter-btn ${selectedLeague === league ? 'active' : ''}`}
                >
                  {league === 'all' ? '–í—Å–µ –ª–∏–≥–∏' : league}
                </button>
              ))}
            </div>
          </div>

          <div className="filter-group">
            <label>–ü–æ–∑–∏—Ü–∏—è:</label>
            <div className="filter-buttons">
              {availablePositions.map(position => (
                <button
                  key={position}
                  onClick={() => setSelectedPosition(position)}
                  className={`filter-btn ${selectedPosition === position ? 'active' : ''}`}
                >
                  {position === 'all' ? '–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏' : getPositionName(position)}
                </button>
              ))}
            </div>
          </div>
        </div>

        <div className="players-grid">
          {filteredPlayers.length > 0 ? (
            filteredPlayers.map((player, index) => (
              <ScrollAnimation key={player.id} animation="scaleIn" delay={index * 100}>
                <div className="player-card" onClick={() => setSelectedPlayer(player)}>
                  <div className="player-card-header">
                    <img 
                      src={player.photo} 
                      alt={player.name} 
                      className="player-photo"
                      onError={(e) => { 
                        const target = e.target as HTMLImageElement; 
                        const firstChar = player.name.charAt(0).toUpperCase();
                        target.src = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(`
                          <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
                            <rect width="200" height="200" fill="#8b5cf6"/>
                            <text x="50%" y="50%" font-family="Arial" font-size="60" fill="white" text-anchor="middle" dy=".3em">${firstChar}</text>
                          </svg>
                        `)}`; 
                      }} 
                    />
                    <div className="player-badges">
                      <span
                        className="position-badge"
                        style={{ backgroundColor: getPositionColor(player.position) }}
                      >
                        {player.position}
                      </span>
                      <span className="rating-badge">
                        <Star size={14} /> {player.overall} OVR
                      </span>
                    </div>
                  </div>
                  
                  <div className="player-card-content">
                    <h3 className="player-name">{player.name}</h3>
                    
                    <div className="player-team">
                      <img 
                        src={player.teamLogo} 
                        alt={player.team} 
                        className="team-logo-small"
                        onError={(e) => {
                          const target = e.target as HTMLImageElement;
                          target.style.display = 'none';
                        }}
                      />
                      <span>{player.team}</span>
                    </div>
                    
                    <div className="player-info">
                      <div className="info-item">
                        <Flag size={14} />
                        <span>{player.nationality} {player.nationalityFlag}</span>
                      </div>
                      <div className="info-item">
                        <Shirt size={14} />
                        <span>{getPositionName(player.position)}</span>
                      </div>
                    </div>
                    
                    <div className="player-stats-row">
                      <div className="player-stat-item">
                        <Goal size={16} />
                        <span>{player.goals} –ì–æ–ª–æ–≤</span>
                      </div>
                      <div className="player-stat-item">
                        <Zap size={16} />
                        <span>{player.assists} –ê—Å—Å–∏—Å—Ç–æ–≤</span>
                      </div>
                    </div>
                    
                    <div className="player-rating">
                      <div className="rating-label">–†–µ–π—Ç–∏–Ω–≥</div>
                      <div className="rating-value">{player.rating}</div>
                    </div>
                  </div>
                </div>
              </ScrollAnimation>
            ))
          ) : (
            <div className="no-results">
              <Search size={48} />
              <h3>–ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
              <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã.</p>
            </div>
          )}
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–≥—Ä–æ–∫–µ */}
        {selectedPlayer && (
          <div className="modal-overlay" onClick={() => setSelectedPlayer(null)}>
            <div className="player-modal" onClick={(e) => e.stopPropagation()}>
              <div className="modal-header">
                <h2>{selectedPlayer.name}</h2>
                <button 
                  className="close-btn"
                  onClick={() => setSelectedPlayer(null)}
                >
                  √ó
                </button>
              </div>
              
              <div className="modal-content">
                <div className="player-detail-header">
                  <img 
                    src={selectedPlayer.photo} 
                    alt={selectedPlayer.name} 
                    className="player-detail-photo"
                    onError={(e) => {
                      const target = e.target as HTMLImageElement;
                      const firstChar = selectedPlayer.name.charAt(0).toUpperCase();
                      target.src = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(`
                        <svg width="300" height="300" xmlns="http://www.w3.org/2000/svg">
                          <rect width="300" height="300" fill="#8b5cf6"/>
                          <text x="50%" y="50%" font-family="Arial" font-size="80" fill="white" text-anchor="middle" dy=".3em">${firstChar}</text>
                        </svg>
                      `)}`;
                    }}
                  />
                  <div className="player-detail-info">
                    <div className="player-detail-team">
                      <img 
                        src={selectedPlayer.teamLogo} 
                        alt={selectedPlayer.team} 
                        className="team-logo-detail"
                        onError={(e) => {
                          const target = e.target as HTMLImageElement;
                          target.style.display = 'none';
                        }}
                      />
                      <span>{selectedPlayer.team}</span>
                    </div>
                    <div className="player-detail-position">
                      <span
                        className="position-badge-large"
                        style={{ backgroundColor: getPositionColor(selectedPlayer.position) }}
                      >
                        {getPositionName(selectedPlayer.position)}
                      </span>
                    </div>
                    <div className="player-detail-nationality">
                      <Flag size={16} />
                      <span>{selectedPlayer.nationality} {selectedPlayer.nationalityFlag}</span>
                    </div>
                  </div>
                </div>
                
                <div className="player-detail-stats">
                  <div className="stats-grid">
                    <div className="stat-card">
                      <div className="stat-icon">
                        <Goal size={24} />
                      </div>
                      <div className="stat-content">
                        <div className="stat-value">{selectedPlayer.goals}</div>
                        <div className="stat-label">–ì–æ–ª—ã</div>
                      </div>
                    </div>
                    
                    <div className="stat-card">
                      <div className="stat-icon">
                        <Zap size={24} />
                      </div>
                      <div className="stat-content">
                        <div className="stat-value">{selectedPlayer.assists}</div>
                        <div className="stat-label">–ê—Å—Å–∏—Å—Ç—ã</div>
                      </div>
                    </div>
                    
                    <div className="stat-card">
                      <div className="stat-icon">
                        <Shirt size={24} />
                      </div>
                      <div className="stat-content">
                        <div className="stat-value">{selectedPlayer.matches}</div>
                        <div className="stat-label">–ú–∞—Ç—á–∏</div>
                      </div>
                    </div>
                    
                    <div className="stat-card">
                      <div className="stat-icon">
                        <Star size={24} />
                      </div>
                      <div className="stat-content">
                        <div className="stat-value">{selectedPlayer.rating}</div>
                        <div className="stat-label">–†–µ–π—Ç–∏–Ω–≥</div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="player-description">
                    <p>{selectedPlayer.description}</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default PlayersPage;