import React, { useState, useEffect } from 'react';
import { Search, Heart, Users, Star, X, MapPin } from 'lucide-react';
import ScrollAnimation from './ScrollAnimation';

interface Team {
  id: string;
  name: string;
  logo: string;
  league: string;
  country: string;
  stadium: string;
  coach: string;
  playersCount: number;
  titles: number;
  description: string;
}

interface Player {
  id: string;
  name: string;
  photo: string;
  team: string;
  teamLogo: string;
  league: string;
  nationality: string;
  nationalityFlag: string;
  position: string;
  overall: number;
  rating: number;
  goals: number;
  assists: number;
  matches: number;
  description: string;
}

// Mock data (should be consistent with TeamsPage and PlayersPage)
const allTeams: Team[] = [
  { id: 'arsenal', name: 'Arsenal', logo: 'https://upload.wikimedia.org/wikipedia/en/5/53/Arsenal_FC.svg', league: 'Premier League', country: '–ê–Ω–≥–ª–∏—è', stadium: 'Emirates Stadium', coach: 'Mikel Arteta', playersCount: 25, titles: 3, description: '–û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö —É—Å–ø–µ—à–Ω—ã—Ö –∫–ª—É–±–æ–≤ –ê–Ω–≥–ª–∏–∏.' },
  { id: 'man-city', name: 'Manchester City', logo: 'https://upload.wikimedia.org/wikipedia/en/e/eb/Manchester_City_FC_logo.svg', league: 'Premier League', country: '–ê–Ω–≥–ª–∏—è', stadium: 'Etihad Stadium', coach: 'Pep Guardiola', playersCount: 27, titles: 9, description: '–î–µ–π—Å—Ç–≤—É—é—â–∏–µ —á–µ–º–ø–∏–æ–Ω—ã –ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∏.' },
  { id: 'liverpool', name: 'Liverpool', logo: 'https://upload.wikimedia.org/wikipedia/en/0/0c/Liverpool_FC.svg', league: 'Premier League', country: '–ê–Ω–≥–ª–∏—è', stadium: 'Anfield', coach: 'J√ºrgen Klopp', playersCount: 25, titles: 19, description: '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–ª—É–± —Å –±–æ–≥–∞—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π.' },
  { id: 'real-madrid', name: 'Real Madrid', logo: 'https://upload.wikimedia.org/wikipedia/en/5/56/Real_Madrid_CF.svg', league: 'La Liga', country: '–ò—Å–ø–∞–Ω–∏—è', stadium: 'Santiago Bernab√©u', coach: 'Carlo Ancelotti', playersCount: 25, titles: 35, description: '–°–∞–º—ã–π —Ç–∏—Ç—É–ª–æ–≤–∞–Ω–Ω—ã–π –∫–ª—É–± –ò—Å–ø–∞–Ω–∏–∏.' },
  { id: 'barcelona', name: 'Barcelona', logo: 'https://upload.wikimedia.org/wikipedia/en/4/47/FC_Barcelona_%28crest%29.svg', league: 'La Liga', country: '–ò—Å–ø–∞–Ω–∏—è', stadium: 'Spotify Camp Nou', coach: 'Xavi', playersCount: 24, titles: 27, description: '–ö–∞—Ç–∞–ª–æ–Ω—Å–∫–∏–π –≥—Ä–∞–Ω–¥.' },
  { id: 'bayern-munich', name: 'Bayern Munich', logo: 'https://upload.wikimedia.org/wikipedia/commons/0/04/FC_Bayern_Munich_logo_%282017%29.svg', league: 'Bundesliga', country: '–ì–µ—Ä–º–∞–Ω–∏—è', stadium: 'Allianz Arena', coach: 'Thomas Tuchel', playersCount: 28, titles: 33, description: '–†–µ–∫–æ—Ä–¥–º–∞–π—Å—Ç–µ—Ä –ì–µ—Ä–º–∞–Ω–∏–∏.' },
  { id: 'psg', name: 'Paris Saint-Germain', logo: 'https://upload.wikimedia.org/wikipedia/en/thumb/4/47/Paris_Saint-Germain_F.C..svg/1200px-Paris_Saint-Germain_F.C..svg.png', league: 'Ligue 1', country: '–§—Ä–∞–Ω—Ü–∏—è', stadium: 'Parc des Princes', coach: 'Luis Enrique', playersCount: 27, titles: 11, description: '–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π –∫–ª—É–± –≤–æ –§—Ä–∞–Ω—Ü–∏–∏.' },
  { id: 'juventus', name: 'Juventus', logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Juventus_FC_2017_logo.svg/1200px-Juventus_FC_2017_logo.svg.png', league: 'Serie A', country: '–ò—Ç–∞–ª–∏—è', stadium: 'Allianz Stadium', coach: 'Massimiliano Allegri', playersCount: 26, titles: 36, description: '–°—Ç–∞—Ä–∞—è —Å–∏–Ω—å–æ—Ä–∞ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —Ñ—É—Ç–±–æ–ª–∞.' },
  { id: 'man-utd', name: 'Manchester Utd', logo: 'https://upload.wikimedia.org/wikipedia/en/7/7a/Manchester_United_FC_crest.svg', league: 'Premier League', country: '–ê–Ω–≥–ª–∏—è', stadium: 'Old Trafford', coach: 'Erik ten Hag', playersCount: 26, titles: 20, description: '–û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö —Ç–∏—Ç—É–ª–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—É–±–æ–≤ –ê–Ω–≥–ª–∏–∏.' },
  { id: 'chelsea', name: 'Chelsea', logo: 'https://upload.wikimedia.org/wikipedia/en/thumb/c/cc/Chelsea_FC.svg/1200px-Chelsea_FC.svg.png', league: 'Premier League', country: '–ê–Ω–≥–ª–∏—è', stadium: 'Stamford Bridge', coach: 'Mauricio Pochettino', playersCount: 27, titles: 6, description: '–û–¥–∏–Ω –∏–∑ –≤–µ–¥—É—â–∏—Ö –∫–ª—É–±–æ–≤ –õ–æ–Ω–¥–æ–Ω–∞.' },
  { id: 'dortmund', name: 'Borussia Dortmund', logo: 'https://upload.wikimedia.org/wikipedia/commons/6/67/Borussia_Dortmund_logo.svg', league: 'Bundesliga', country: '–ì–µ—Ä–º–∞–Ω–∏—è', stadium: 'Signal Iduna Park', coach: 'Edin Terziƒá', playersCount: 26, titles: 8, description: '–û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–ª—É–±–æ–≤ –ì–µ—Ä–º–∞–Ω–∏–∏.' },
  { id: 'inter-milan', name: 'Inter Milan', logo: 'https://upload.wikimedia.org/wikipedia/commons/0/05/FC_Internazionale_Milano_2021.svg', league: 'Serie A', country: '–ò—Ç–∞–ª–∏—è', stadium: 'San Siro', coach: 'Simone Inzaghi', playersCount: 25, titles: 19, description: '–ß–µ–º–ø–∏–æ–Ω—ã –°–µ—Ä–∏–∏ –ê.' },
  { id: 'ac-milan', name: 'AC Milan', logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d0/Logo_of_AC_Milan.svg/1200px-Logo_of_AC_Milan.svg.png', league: 'Serie A', country: '–ò—Ç–∞–ª–∏—è', stadium: 'San Siro', coach: 'Stefano Pioli', playersCount: 24, titles: 19, description: '–û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö —É—Å–ø–µ—à–Ω—ã—Ö –∫–ª—É–±–æ–≤ –ò—Ç–∞–ª–∏–∏.' },
  { id: 'atletico-madrid', name: 'Atl√©tico Madrid', logo: 'https://upload.wikimedia.org/wikipedia/en/f/f4/Atletico_Madrid_2017_logo.svg', league: 'La Liga', country: '–ò—Å–ø–∞–Ω–∏—è', stadium: 'C√≠vitas Metropolitano', coach: 'Diego Simeone', playersCount: 25, titles: 11, description: '–ú–∞–¥—Ä–∏–¥—Å–∫–∏–π –∫–ª—É–± —Å —Å–∏–ª—å–Ω–æ–π –æ–±–æ—Ä–æ–Ω–æ–π.' },
  { id: 'tottenham', name: 'Tottenham Hotspur', logo: 'https://upload.wikimedia.org/wikipedia/en/b/b4/Tottenham_Hotspur.svg', league: 'Premier League', country: '–ê–Ω–≥–ª–∏—è', stadium: 'Tottenham Hotspur Stadium', coach: 'Ange Postecoglou', playersCount: 26, titles: 0, description: '–õ–æ–Ω–¥–æ–Ω—Å–∫–∏–π –∫–ª—É–± —Å –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏.' },
];

const allPlayers: Player[] = [
  { id: 'messi', name: '–õ–∏–æ–Ω–µ–ª—å –ú–µ—Å—Å–∏', photo: 'https://upload.wikimedia.org/wikipedia/commons/b/b4/Lionel_Messi_2023.jpg', team: 'Inter Miami CF', teamLogo: 'https://upload.wikimedia.org/wikipedia/en/thumb/e/e8/Inter_Miami_CF_logo.svg/1200px-Inter_Miami_CF_logo.svg.png', league: 'MLS', nationality: '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞', nationalityFlag: 'üá¶üá∑', position: 'CAM', overall: 93, rating: 8.9, goals: 820, assists: 360, matches: 1045, description: '–û–¥–∏–Ω –∏–∑ –≤–µ–ª–∏—á–∞–π—à–∏—Ö —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–æ–≤ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω.' },
  { id: 'ronaldo', name: '–ö—Ä–∏—à—Ç–∏–∞–Ω—É –†–æ–Ω–∞–ª–¥—É', photo: 'https://upload.wikimedia.org/wikipedia/commons/2/23/Cristiano_Ronaldo_2018.jpg', team: 'Al Nassr FC', teamLogo: 'https://upload.wikimedia.org/wikipedia/en/thumb/5/54/Al_Nassr_FC_logo.svg/1200px-Al_Nassr_FC_logo.svg.png', league: 'Saudi Pro League', nationality: '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è', nationalityFlag: 'üáµüáπ', position: 'ST', overall: 90, rating: 8.5, goals: 870, assists: 270, matches: 1200, description: '–†–µ–∫–æ—Ä–¥—Å–º–µ–Ω –ø–æ –≥–æ–ª–∞–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ñ—É—Ç–±–æ–ª–∞.' },
  { id: 'mbappe', name: '–ö–∏–ª–∏–∞–Ω –ú–±–∞–ø–ø–µ', photo: 'https://upload.wikimedia.org/wikipedia/commons/b/b3/Mbapp%C3%A9_2022.jpg', team: 'Paris Saint-Germain', teamLogo: 'https://upload.wikimedia.org/wikipedia/en/thumb/4/47/Paris_Saint-Germain_F.C..svg/1200px-Paris_Saint-Germain_F.C..svg.png', league: 'Ligue 1', nationality: '–§—Ä–∞–Ω—Ü–∏—è', nationalityFlag: 'üá´üá∑', position: 'ST', overall: 91, rating: 8.8, goals: 300, assists: 150, matches: 400, description: '–û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö –∏ —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã—Ö –Ω–∞–ø–∞–¥–∞—é—â–∏—Ö –º–∏—Ä–∞.' },
  { id: 'haaland', name: '–≠—Ä–ª–∏–Ω–≥ –•–æ–ª–∞–Ω–¥', photo: 'https://upload.wikimedia.org/wikipedia/commons/0/07/Erling_Haaland_2023_%28cropped%29.jpg', team: 'Manchester City', teamLogo: 'https://upload.wikimedia.org/wikipedia/en/e/eb/Manchester_City_FC_logo.svg', league: 'Premier League', nationality: '–ù–æ—Ä–≤–µ–≥–∏—è', nationalityFlag: 'üá≥üá¥', position: 'ST', overall: 91, rating: 8.7, goals: 200, assists: 40, matches: 250, description: '–ú–æ–ª–æ–¥–æ–π —Ñ–µ–Ω–æ–º–µ–Ω, –∑–∞–±–∏–≤–∞—é—â–∏–π –≥–æ–ª—ã –ø–∞—á–∫–∞–º–∏.' },
  { id: 'salah', name: '–ú–æ—Ö–∞–º–µ–¥ –°–∞–ª–∞—Ö', photo: 'https://upload.wikimedia.org/wikipedia/commons/4/4e/Mohamed_Salah_2018.jpg', team: 'Liverpool', teamLogo: 'https://upload.wikimedia.org/wikipedia/en/0/0c/Liverpool_FC.svg', league: 'Premier League', nationality: '–ï–≥–∏–ø–µ—Ç', nationalityFlag: 'üá™üá¨', position: 'RW', overall: 89, rating: 8.6, goals: 200, assists: 100, matches: 450, description: '–û–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö –≤–∏–Ω–≥–µ—Ä–æ–≤ –≤ –º–∏—Ä–µ.' },
  { id: 'benzema', name: '–ö–∞—Ä–∏–º –ë–µ–Ω–∑–µ–º–∞', photo: 'https://upload.wikimedia.org/wikipedia/commons/0/06/Karim_Benzema_wearing_Real_Madrid_kit_2021.jpg', team: 'Al-Ittihad Club', teamLogo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/Al-Ittihad_Club_logo.svg/1200px-Al-Ittihad_Club_logo.svg.png', league: 'Saudi Pro League', nationality: '–§—Ä–∞–Ω—Ü–∏—è', nationalityFlag: 'üá´üá∑', position: 'ST', overall: 89, rating: 8.4, goals: 400, assists: 180, matches: 800, description: '–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –Ω–∞–ø–∞–¥–∞—é—â–∏–π —Å –æ—Ç–ª–∏—á–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º.' },
  { id: 'modric', name: '–õ—É–∫–∞ –ú–æ–¥—Ä–∏—á', photo: 'https://upload.wikimedia.org/wikipedia/commons/e/e9/Luka_Modri%C4%87_2022.jpg', team: 'Real Madrid', teamLogo: 'https://upload.wikimedia.org/wikipedia/en/5/56/Real_Madrid_CF.svg', league: 'La Liga', nationality: '–•–æ—Ä–≤–∞—Ç–∏—è', nationalityFlag: 'üá≠üá∑', position: 'CM', overall: 88, rating: 8.5, goals: 100, assists: 150, matches: 750, description: '–ú–∞—ç—Å—Ç—Ä–æ –ø–æ–ª—É–∑–∞—â–∏—Ç—ã, –æ–±–ª–∞–¥–∞—Ç–µ–ª—å –ó–æ–ª–æ—Ç–æ–≥–æ –º—è—á–∞.' },
  { id: 'kane', name: '–ì–∞—Ä—Ä–∏ –ö–µ–π–Ω', photo: 'https://upload.wikimedia.org/wikipedia/commons/e/e1/Harry_Kane_2018.jpg', team: 'Bayern Munich', teamLogo: 'https://upload.wikimedia.org/wikipedia/commons/0/04/FC_Bayern_Munich_logo_%282017%29.svg', league: 'Bundesliga', nationality: '–ê–Ω–≥–ª–∏—è', nationalityFlag: 'üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø', position: 'ST', overall: 90, rating: 8.7, goals: 300, assists: 80, matches: 500, description: '–û–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–ø–∞–¥–∞—é—â–∏—Ö –º–∏—Ä–∞.' },
  { id: 'neymar', name: '–ù–µ–π–º–∞—Ä', photo: 'https://upload.wikimedia.org/wikipedia/commons/6/65/Neymar_Jr._with_PSG%2C_2022.jpg', team: 'Al Hilal SFC', teamLogo: 'https://upload.wikimedia.org/wikipedia/en/thumb/e/e0/Al-Hilal_FC_logo.svg/1200px-Al-Hilal_FC_logo.svg.png', league: 'Saudi Pro League', nationality: '–ë—Ä–∞–∑–∏–ª–∏—è', nationalityFlag: 'üáßüá∑', position: 'LW', overall: 89, rating: 8.6, goals: 350, assists: 200, matches: 600, description: '–ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π –≤–∏—Ä—Ç—É–æ–∑ —Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π.' },
  { id: 'de-bruyne', name: '–ö–µ–≤–∏–Ω –î–µ –ë—Ä—é–π–Ω–µ', photo: 'https://upload.wikimedia.org/wikipedia/commons/4/46/Kevin_De_Bruyne_2018.jpg', team: 'Manchester City', teamLogo: 'https://upload.wikimedia.org/wikipedia/en/e/eb/Manchester_City_FC_logo.svg', league: 'Premier League', nationality: '–ë–µ–ª—å–≥–∏—è', nationalityFlag: 'üáßüá™', position: 'CM', overall: 91, rating: 8.9, goals: 150, assists: 250, matches: 600, description: '–û–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö –ø–ª–µ–π–º–µ–π–∫–µ—Ä–æ–≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏.' },
];

const FavoritesPage: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'teams' | 'players'>('teams');
  const [searchTermTeam, setSearchTermTeam] = useState<string>('');
  const [searchTermPlayer, setSearchTermPlayer] = useState<string>('');
  const [favoriteTeams, setFavoriteTeams] = useState<Team[]>(() => {
    const savedFavorites = localStorage.getItem('favoriteTeams');
    return savedFavorites ? JSON.parse(savedFavorites) : [];
  });
  const [favoritePlayers, setFavoritePlayers] = useState<Player[]>(() => {
    const savedFavorites = localStorage.getItem('favoritePlayers');
    return savedFavorites ? JSON.parse(savedFavorites) : [];
  });

  useEffect(() => {
    localStorage.setItem('favoriteTeams', JSON.stringify(favoriteTeams));
    if (favoriteTeams.length > 0) {
      localStorage.setItem('favoriteTeam', JSON.stringify(favoriteTeams[0]));
    } else {
      localStorage.removeItem('favoriteTeam');
    }
    window.dispatchEvent(new Event('storage'));
  }, [favoriteTeams]);

  useEffect(() => {
    localStorage.setItem('favoritePlayers', JSON.stringify(favoritePlayers));
    window.dispatchEvent(new Event('storage'));
  }, [favoritePlayers]);

  const filteredAvailableTeams = allTeams.filter(team =>
    !favoriteTeams.some(fav => fav.id === team.id) &&
    (team.name.toLowerCase().includes(searchTermTeam.toLowerCase()) ||
      team.league.toLowerCase().includes(searchTermTeam.toLowerCase()) ||
      team.country.toLowerCase().includes(searchTermTeam.toLowerCase()))
  );

  const filteredAvailablePlayers = allPlayers.filter(player =>
    !favoritePlayers.some(fav => fav.id === player.id) &&
    (player.name.toLowerCase().includes(searchTermPlayer.toLowerCase()) ||
      player.team.toLowerCase().includes(searchTermPlayer.toLowerCase()) ||
      player.position.toLowerCase().includes(searchTermPlayer.toLowerCase()))
  );

  const handleAddFavoriteTeam = (team: Team) => {
    setFavoriteTeams(prevFavorites => [...prevFavorites, team]);
    setSearchTermTeam('');
  };

  const handleRemoveFavoriteTeam = (teamId: string) => {
    setFavoriteTeams(prevFavorites => prevFavorites.filter(team => team.id !== teamId));
  };

  const handleAddFavoritePlayer = (player: Player) => {
    setFavoritePlayers(prevFavorites => [...prevFavorites, player]);
    setSearchTermPlayer('');
  };

  const handleRemoveFavoritePlayer = (playerId: string) => {
    setFavoritePlayers(prevFavorites => prevFavorites.filter(player => player.id !== playerId));
  };

  const getPositionColor = (position: string) => {
    switch (position) {
      case 'ST': return '#ef4444'; // Red
      case 'RW':
      case 'LW': return '#f59e0b'; // Orange
      case 'CAM':
      case 'CM':
      case 'CDM': return '#8b5cf6'; // Purple
      case 'CB':
      case 'LB':
      case 'RB': return '#10b981'; // Green
      case 'GK': return '#3b82f6'; // Blue
      default: return '#64748b'; // Gray
    }
  };

  return (
    <section className="favorites-page">
      <div className="container">
        <ScrollAnimation animation="fadeInUp">
          <div className="page-header">
            <h1><span className="gradient-text">–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</span></h1>
            <p>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–∏–º–∏ –ª—é–±–∏–º—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∏–≥—Ä–æ–∫–∞–º–∏</p>
          </div>
        </ScrollAnimation>

        <div className="favorites-tabs">
          <button
            className={`favorites-tab-btn ${activeTab === 'teams' ? 'active' : ''}`}
            onClick={() => setActiveTab('teams')}
          >
            <Users size={20} />
            <span>–ö–æ–º–∞–Ω–¥—ã</span>
          </button>
          <button
            className={`favorites-tab-btn ${activeTab === 'players' ? 'active' : ''}`}
            onClick={() => setActiveTab('players')}
          >
            <Star size={20} />
            <span>–ò–≥—Ä–æ–∫–∏</span>
          </button>
        </div>

        {activeTab === 'teams' && (
          <div className="favorite-section-content">
            <h3>–ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</h3>
            {favoriteTeams.length > 0 ? (
              <div className="teams-grid">
                {favoriteTeams.map((team, index) => (
                  <ScrollAnimation key={team.id} animation="scaleIn" delay={index * 100}>
                    <div className="team-card">
                      <div className="team-card-header">
                        <img src={team.logo} alt={team.name} className="team-logo" onError={(e) => { const target = e.target as HTMLImageElement; target.style.display = 'none'; }} />
                        <div className="team-badge">
                          <span className="team-league">{team.league}</span>
                        </div>
                      </div>
                      <div className="team-card-content">
                        <h3 className="team-name">{team.name}</h3>
                        <div className="team-location">
                          <MapPin size={16} />
                          <span>{team.country}</span>
                        </div>
                        <button className="add-to-favorites-btn remove" onClick={() => handleRemoveFavoriteTeam(team.id)}>
                          <X size={20} />
                          –£–¥–∞–ª–∏—Ç—å
                        </button>
                      </div>
                    </div>
                  </ScrollAnimation>
                ))}
              </div>
            ) : (
              <div className="no-results">
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.</p>
              </div>
            )}

            <h3>–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ</h3>
            <div className="search-container">
              <Search size={20} className="search-icon" />
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –ª–∏–≥–µ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–µ..."
                className="search-input"
                value={searchTermTeam}
                onChange={(e) => setSearchTermTeam(e.target.value)}
              />
            </div>
            <div className="teams-grid">
              {filteredAvailableTeams.length > 0 ? (
                filteredAvailableTeams.map((team, index) => (
                  <ScrollAnimation key={team.id} animation="scaleIn" delay={index * 100}>
                    <div className="team-card">
                      <div className="team-card-header">
                        <img src={team.logo} alt={team.name} className="team-logo" onError={(e) => { const target = e.target as HTMLImageElement; target.style.display = 'none'; }} />
                        <div className="team-badge">
                          <span className="team-league">{team.league}</span>
                        </div>
                      </div>
                      <div className="team-card-content">
                        <h3 className="team-name">{team.name}</h3>
                        <div className="team-location">
                          <MapPin size={16} />
                          <span>{team.country}</span>
                        </div>
                        <button className="add-to-favorites-btn" onClick={() => handleAddFavoriteTeam(team)}>
                          <Heart size={20} />
                          –î–æ–±–∞–≤–∏—Ç—å
                        </button>
                      </div>
                    </div>
                  </ScrollAnimation>
                ))
              ) : (
                <div className="no-results">
                  <p>–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.</p>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'players' && (
          <div className="favorite-section-content">
            <h3>–ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏</h3>
            {favoritePlayers.length > 0 ? (
              <div className="players-grid">
                {favoritePlayers.map((player, index) => (
                  <ScrollAnimation key={player.id} animation="scaleIn" delay={index * 100}>
                    <div className="player-card">
                      <div className="player-card-header">
                        <img src={player.photo} alt={player.name} className="player-photo" onError={(e) => { const target = e.target as HTMLImageElement; target.style.display = 'none'; }} />
                        <div className="player-badges">
                          <span 
                            className="position-badge"
                            style={{ backgroundColor: getPositionColor(player.position) }}
                          >
                            {player.position}
                          </span>
                          <span className="rating-badge">
                            <Star size={14} /> {player.overall} OVR
                          </span>
                        </div>
                      </div>
                      <div className="player-card-content">
                        <h3 className="player-name">{player.name}</h3>
                        <div className="player-team">
                          <img src={player.teamLogo} alt={player.team} className="team-logo-small" onError={(e) => { const target = e.target as HTMLImageElement; target.style.display = 'none'; }} />
                          <span>{player.team}</span>
                        </div>
                        <button className="add-to-favorites-btn remove" onClick={() => handleRemoveFavoritePlayer(player.id)}>
                          <X size={20} />
                          –£–¥–∞–ª–∏—Ç—å
                        </button>
                      </div>
                    </div>
                  </ScrollAnimation>
                ))}
              </div>
            ) : (
              <div className="no-results">
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.</p>
              </div>
            )}

            <h3>–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ</h3>
            <div className="search-container">
              <Search size={20} className="search-icon" />
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–º–µ–Ω–∏, –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –ø–æ–∑–∏—Ü–∏–∏..."
                className="search-input"
                value={searchTermPlayer}
                onChange={(e) => setSearchTermPlayer(e.target.value)}
              />
            </div>
            <div className="players-grid">
              {filteredAvailablePlayers.length > 0 ? (
                filteredAvailablePlayers.map((player, index) => (
                  <ScrollAnimation key={player.id} animation="scaleIn" delay={index * 100}>
                    <div className="player-card">
                      <div className="player-card-header">
                        <img src={player.photo} alt={player.name} className="player-photo" onError={(e) => { const target = e.target as HTMLImageElement; target.style.display = 'none'; }} />
                        <div className="player-badges">
                          <span 
                            className="position-badge"
                            style={{ backgroundColor: getPositionColor(player.position) }}
                          >
                            {player.position}
                          </span>
                          <span className="rating-badge">
                            <Star size={14} /> {player.overall} OVR
                          </span>
                        </div>
                      </div>
                      <div className="player-card-content">
                        <h3 className="player-name">{player.name}</h3>
                        <div className="player-team">
                          <img src={player.teamLogo} alt={player.team} className="team-logo-small" onError={(e) => { const target = e.target as HTMLImageElement; target.style.display = 'none'; }} />
                          <span>{player.team}</span>
                        </div>
                        <button className="add-to-favorites-btn" onClick={() => handleAddFavoritePlayer(player)}>
                          <Heart size={20} />
                          –î–æ–±–∞–≤–∏—Ç—å
                        </button>
                      </div>
                    </div>
                  </ScrollAnimation>
                ))
              ) : (
                <div className="no-results">
                  <p>–ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.</p>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default FavoritesPage;